[{"/Users/declannelson/code/gcal/src/index.js":"1","/Users/declannelson/code/gcal/src/App.js":"2","/Users/declannelson/code/gcal/src/reportWebVitals.js":"3","/Users/declannelson/code/gcal/src/components/DisplayData.js":"4","/Users/declannelson/code/gcal/src/components/DoughnutChart.js":"5","/Users/declannelson/code/gcal/src/components/BarChart.js":"6","/Users/declannelson/code/gcal/src/helpers/dataAggregator.js":"7"},{"size":583,"mtime":1653304363281,"results":"8","hashOfConfig":"9"},{"size":3013,"mtime":1653305810065,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1653048688740,"results":"11","hashOfConfig":"9"},{"size":2027,"mtime":1653306310186,"results":"12","hashOfConfig":"9"},{"size":949,"mtime":1653141356256,"results":"13","hashOfConfig":"9"},{"size":1308,"mtime":1653307449250,"results":"14","hashOfConfig":"9"},{"size":1676,"mtime":1653140247145,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4fhhx0",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/declannelson/code/gcal/src/index.js",[],[],"/Users/declannelson/code/gcal/src/App.js",[],[],"/Users/declannelson/code/gcal/src/reportWebVitals.js",[],[],"/Users/declannelson/code/gcal/src/components/DisplayData.js",["39","40","41","42"],[],"import React, { useState, useEffect } from 'react';\nimport Container from 'react-bootstrap/esm/Container';\nimport Row from 'react-bootstrap/esm/Row';\n\nimport { aggregateEvents, aggregateColors } from '../helpers/dataAggregator';\nimport BarChart from './BarChart';\nimport DoughnutChart from './DoughnutChart';\n\nconst colorMap = {\n    Sage: '#7AE7BF',\n    Flamingo: '#FF887C',\n    Blueberry: '#5484ED',\n    Banana: '#FBD75B',\n    Graphite: '#E1E1E1',\n    Basil: '#51B749',\n    Default: '#46D6DB'\n}\n\nconst DisplayData = (props) => {\n\n    const displayAggregations = () => {\n        const [eMap, eSet] = aggregateEvents(props.data);\n        var listItems = [];\n        for (const key in eMap) {\n            listItems.push(`${key}: ${eMap[key]} mins`)\n        }\n\n        listItems.sort((a, b) => {\n            const aTime = parseInt(a.split(': ')[1]);\n            const bTime = parseInt(b.split(': ')[1]);\n            return aTime > bTime;\n        });\n        \n        listItems = listItems.map((item, idx) => \n            <li key={idx}>{item}</li>\n        );\n\n        const colorCounter = aggregateColors(props.data);\n        var colors = Array.from(Object.keys(colorCounter));\n        colors = colors.map(color => colorMap[color]);\n\n        return (\n            <Container>\n                {\n                    listItems.length < 11 ? \n                    <Container>\n                        <h3>Events</h3>\n                        <ul>{listItems}</ul> \n                    </Container>\n                    :\n                    <></>\n                }\n                <Row>\n                    <BarChart data={colorCounter} title={'Minutes Per Category'} colors={colors}/>\n                </Row>\n                <Row>\n                    <BarChart data={eMap} title={'Minutes Per Event'} />\n                </Row>\n            </Container>\n        );\n    }\n    \n    return (\n        <Container>\n            <h2>Data Aggregation</h2>\n            {displayAggregations()}\n        </Container>\n    );\n}\n\nexport default DisplayData;\n\n","/Users/declannelson/code/gcal/src/components/DoughnutChart.js",["43"],[],"import React from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n} from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  ArcElement,\n  Tooltip,\n  Legend\n);\n\nconst DoughnutChart = ({ data, title, colors }) => {\n\n  const getData = () => {\n    return {\n      labels: Object.keys(data),\n      datasets: [\n        {\n          label: title,\n          data: Object.values(data),\n          backgroundColor: colors ? colors : 'blue'\n        }\n      ]\n    }\n  }\n\n  const getOptions = () => {\n    return {\n        legend: {\n            display: false,\n            position: \"right\"\n            },\n            elements: {\n            arc: {\n                borderWidth: 0\n            }\n        }\n    };    \n  }\n\n  return <Doughnut options={getOptions()} data={getData()} />\n}\n\nexport default DoughnutChart;","/Users/declannelson/code/gcal/src/components/BarChart.js",[],[],"/Users/declannelson/code/gcal/src/helpers/dataAggregator.js",[],[],{"ruleId":"44","severity":1,"message":"45","line":1,"column":17,"nodeType":"46","messageId":"47","endLine":1,"endColumn":25},{"ruleId":"44","severity":1,"message":"48","line":1,"column":27,"nodeType":"46","messageId":"47","endLine":1,"endColumn":36},{"ruleId":"44","severity":1,"message":"49","line":7,"column":8,"nodeType":"46","messageId":"47","endLine":7,"endColumn":21},{"ruleId":"44","severity":1,"message":"50","line":22,"column":22,"nodeType":"46","messageId":"47","endLine":22,"endColumn":26},{"ruleId":"44","severity":1,"message":"51","line":7,"column":3,"nodeType":"46","messageId":"47","endLine":7,"endColumn":8},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'DoughnutChart' is defined but never used.","'eSet' is assigned a value but never used.","'Title' is defined but never used."]